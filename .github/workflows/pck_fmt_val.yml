# name: Build AMI with Packer

# on:
#   pull_request:
#     branches:
#       - main
#     types: [closed]

# jobs:
#   create-zip:
#     runs-on: ubuntu-latest
#     if: github.event.pull_request.merged == true
#     steps:
#       - name: Checkout Repository
#         uses: actions/checkout@v2
#       - name: Create Zip Archive
#         run: |
#           zip -r madhura_kurhadkar_002769373_06.zip ./

#       - name: Build AMI
#         run: |
#           packer init aws-debian.pkr.hcl
#           packer fmt -check aws-debian.pkr.hcl
#           packer validate aws-debian.pkr.hcl
#           packer build aws-debian.pkr.hcl
#         env:
#           AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
#           AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}


name: Build AMI with Packer

on:
  pull_request:
    branches:
      - main
    types: [closed]

jobs:
  create-zip:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2
      - name: Create Zip Archive
        run: |
          zip -r madhura_kurhadkar_002769373_06.zip ./

      - name: Build AMI
        run: |
          packer init aws-debian.pkr.hcl
          packer fmt -check aws-debian.pkr.hcl
          packer validate aws-debian.pkr.hcl
          packer build aws-debian.pkr.hcl
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Setup demo credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{secrets.AWS_ACCESS_KEY_DEMO}}
          aws-secret-access-key: ${{secrets.AWS_SECRET_ACCESS_KEY_DEMO}}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install AWS CLI
        run: |
          sudo apt-get update
          sudo apt-get install -y awscli

      - name: Get Latest AMI ID
        id: latest-ami
        run: |
          latest_ami_id=$(aws ec2 describe-images --region ${{ secrets.AWS_REGION }} --query 'Images | sort_by(@, &CreationDate) | [-1].ImageId' --output text)
          echo "Latest_AMI=$latest_ami_id"

      - name: Create New Launch Template Version
        run: |
          latest_version=$(aws ec2 describe-launch-template-versions --launch-template-name webAppLaunchTemplate --query 'LaunchTemplateVersions[*].VersionNumber' --output text | sort -n | tail -n 1)
          aws ec2 create-launch-template-version --launch-template-name webAppLaunchTemplate --source-version 1 --launch-template-data "{\"ImageId\":\"$steps.latest-ami.outputs.ami_id\"}"
          echo "Latest launch template created with ID=$launch_template_id"

      - name: Issue Instance Refresh Command
        run: |
          aws autoscaling start-instance-refresh --auto-scaling-group-name webAppAutoScalingGroup --latest-launch-template

      - name: Wait for Instance Refresh Completion
        id: wait-instance-refresh
        run: |
          while :
          do
            refresh_status=$(aws autoscaling describe-instance-refreshes --auto-scaling-group-name webAppAutoScalingGroup --query 'InstanceRefreshes[0].Status' --output text)
            if [ "$refresh_status" = "Successful" ]; then
              echo "Instance refresh completed successfully"
              break
            elif [ "$refresh_status" = "Failed" ]; then
              echo "Instance refresh failed"
              exit 1
            else
              echo "Instance refresh in progress..."
              sleep 30
            fi
          done

      - name: Workflow Status
        if: steps.wait-instance-refresh.outcome == 'failure'
        run: exit 1
